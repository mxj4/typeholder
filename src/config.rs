use itertools::Itertools;
use sxd_document::Package;
use sxd_document::parser;
use std::collections::HashMap;
use std::fs::File;
use std::io::Read;
use family::Family;

pub struct Config<'a> {
    scan_matches: Vec<&'a Family>,
    aliases: Vec<Alias<'a>>,
    dom: Package,
}

/*
impl Config<'a> {
    fn add_family(&self) {

    }
}
*/

const DEFAULT_FONTS_CONF: &str = "<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
<fontconfig>
    <alias>
        <!-- Generated by Typeholder, DO NOT EDIT -->
        <family>sans-serif</family>
        <prefer>
        </prefer>
    </alias>
    <alias>
        <!-- Generated by Typeholder, DO NOT EDIT -->
        <family>serif</family>
        <prefer>
        </prefer>
    </alias>
    <alias>
        <!-- Generated by Typeholder, DO NOT EDIT -->
        <family>monospace</family>
        <prefer>
        </prefer>
    </alias>
</fontconfig>
";
pub fn parse_or_default(path: &str) -> Config {
    let config_parse = match File::open(path) {
        Ok(mut f) => {
            let mut buffer = String::new();
            f.read_to_string(&mut buffer).expect(
                "Failed to parse your fonts.conf file",
            );
            parser::parse(&buffer)
        },
        _ => parser::parse(DEFAULT_FONTS_CONF),
    };
    let config_package = match config_parse {
        Ok(package) => package,
        Err((_, errors)) => panic!("Error parsing fonts.conf!\n{}", errors.iter().join("\n"))
    };

    Config {
        scan_matches: vec![],
        aliases: vec![],
        dom: config_package,
    }
}

struct Alias<'a> {
    name: String,
    prefer_list: Vec<&'a Family>,
}

/*
impl Alias {

}
*/

#[test]
fn test_add_family() {}
